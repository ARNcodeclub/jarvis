{
	// Main title of your project, used in the header & navbar
	title: Jarvis

	// Display your navbar title as a dropdown for discovering your other projects
	projectpages: [ // false to disable
		{icon: "home", title: "iHome", url: "http://domotiquefacile.fr" }
		{icon: "play-circle", title: "Launcher", url: "http://domotiquefacile.fr/launcher/" }
		{icon: "picture", title: "MyPhotos", url: "https://github.com/alexylem/myphotos#myphotos"}
		{icon: "console", title: "Jarvis", url: "http://alexylem.github.io/jarvis/"}
		{icon: false, title: "♠ Coinche", url: "http://alexylem.github.io/coinche/"}
		{icon: "wrench", title: "Builder" }
		{icon: "bullhorn", title: "ProjectPage", url: "http://alexylem.github.io/projectpage/"}
		{icon: "globe", title: "Moeata Creations", url: "http://moeatacreations.fr"}
	]

	// Enable Disqus comments (https://publishers.disqus.com/engage)
	comments: true
	disqus_shortname: coinche
	
	// Choose a Bootwatch theme (https://bootswatch.com/) ex: 'united'
	theme: false // false to keep vanilla Bootstrap theme
	
	// These are the main sections of your ProjectPage
	sections: [ /* FULL DOCUMENTATION available here: http://alexylem.github.io/projectpage/#sections
		
		Cheat-Sheet, do not uncomment
		{
			type: 'jumbotron|text|grid' // more to come in the future
			link: 'Link Label' // Set a label if you need a link for this section on the top navigation bar
			id: 'section-id' // used for navbar linking & scrollspy
			title: 'Big title' // title of the section
			text: 'This text supports **Github flavored Markdown**' // (https://markdown-it.github.io/)
			icon: 'asterisk' // for "glyphicon glyphicon-asterisk" (see http://getbootstrap.com/components)
			image: 'img/image.png'
			items: [{ // used for grid section type
				icon: 'asterisk',
				title: 'Short title'
				text: 'Short text for this icon'
			}, {...}]
		}
		*/
		{
			type: jumbotron
			title: "Jarvis"
			text: "Hey Jarvis, what's up?"
			image: "img/banner.png"
		},{
			text: '''
			Jarvis.sh is a dead simple configurable multi-lang jarvis-like bot
			
			Meant for home automation running on slow computer (ex: Raspberry Pi)
			
			It has few dependencies and uses online speech recognition & synthesis
			
			<iframe width="560" height="315" src="https://www.youtube.com/embed/27E_BK1rUKI" frameborder="0" allowfullscreen></iframe>
			
			Example of usage (spoken) and console output:
			```bash
			$> ./jarvis.sh
			+----------------------------------------------+
			| >_ JARVIS - http://alexylem.github.io/jarvis |
			| by Alexandre Mély - alexandre.mely@gmail.com |
			+----------------------------------------------+
			JARVIS: Good morning Alex # parametric welcome phrase
			JARVIS: Waiting to hear 'JARVIS' # always listening mode, magic word is JARVIS
			Alex: @--@@--BlahBlah-- # ignored background noise and discussion
			Alex: Hey Jarvis? # magic word has been heard
			JARVIS: Yes? # parametric magic word response, entering conversation mode
			Alex: Switch on the lights please # here is the order
			JARVIS: Okay # order "*ON*LIGHT*" recognized, executing coresponding command: echo pl a1 on | nc localhost 1099
			Alex: Thank you! # still in conversation mode (timeout is 10sec, or say "cancel", parametric too)
			JARVIS: At your disposal # order "*THANK*" recognized, executing corresponding command: say "At your disposal"
			Alex: # 10 secs elapsed with no order
			JARVIS: Waiting to hear 'JARVIS' # end of conversation mode, magic word to be said again
			```
			> You can customize Jarvis a lot: his name, how he reacts and what he can do.
			'''
		},{
			title: "App flow"
			text: '''
			Here is an overview of the JARVIS flow and how main files are used.
			
			![JARVIS Flow](http://yuml.me/diagram/plain;dir:LR/class/[jarvis-events%7C@daily%20check%20mails%7Bbg:green%7D]-crontab%3E[cron%20scheduler%7Bbg:orange%7D],[$%3Ejarvis.sh]-%3E[wait%20to%20hear%20'JARVIS'],[wait%20to%20hear%20'JARVIS']%3Ctimeout-'JARVIS'%3E[listen%20for%20command],[wait%20to%20hear%20'JARVIS']-.-[jarvis-functions.sh%7Bbg:green%7D%7CLISTEN():%20record%20from%20mic;STT():%20speech%20to%20text;TTS():%20text%20to%20speech;PLAY():%20play%20audio%20file],[listen%20for%20command]-.-[jarvis-functions.sh],[listen%20for%20command]%3CDone-'Command'%3E[execute%20corresponding%20command],[execute%20corresponding%20command]-.-[jarvis-commands%7Bbg:green%7D%7CPATTERN1==command1;PATTERN2==command2;...],[$%3Ejarvis.sh%7Bbg:orange%7D]-.-[jarvis-config.sh%7Bbg:green%7D%7Ctrigger='JARVIS'])
			'''
		},{
			link: Install
			id: install
			title: Install
			text: '''
			<iframe width="560" height="315" src="https://www.youtube.com/embed/VPqjIUuE_So" frameborder="0" allowfullscreen></iframe>
			
			```
			git clone https://github.com/alexylem/jarvis.git
			cd jarvis/
			./jarvis.sh -i
			```
			
			The install process will:
			- Check missing dependencies
			- Let you test & select audio devices
			- Init & let you update the following files:
			
			### `jarvis-config.sh`
			
			- Update settings: JARVIS nickname, always-on listening, language, your Google API key...
			> You can now also choose between Google Speech and PocketSphinx for speech recognition
			- Translate if needed some JARVIS built-in sentences
			
			```bash
			# how YOU want to be called
			username=`whoami`
			# always listening for vocal input, false to wait for keyboard trigger
			# wait magic word to be said before to ask for command
			always_listening=true
			# magic word to be said
			trigger='JARVIS' # also update at top of jarvis-commands file
			# google speech api key http://stackoverflow.com/a/26833337
			google_speech_api_key="YOUR_GOOGLE_SPEECH_API_KEY"
			# language
			language="fr_FR" # en_EN for english
			# execute all matching commands (default only first match)
			all_matches=false
			...
			```
			
			### `jarvis-commands` 

			This is the place to define your own **custom commands**:

			```
			*TEST*==say "It works!"
			*HELLO*|*HI*==say "Hello $username"
			*WHAT TIME*==say "It is `date +%H:%M`"
			*TURN ON*KITCHEN*==echo "pl a1 on" | nc localhost 1099 && say "Done"
			...
			```
			> Discover home automation with X10 & mochad on Raspberry Pi [here](http://www.domotiquefacile.fr/tous-les-tutoriaux/installation-x10-sur-un-raspberry-pi)

			What is before `==` is the voice pattern to match, use `*` for any word and `|` for alternatives
			
			What is after `==` is the bash command to execute, you can also use the following variables and functions:
			  - say "I'm going to speak this out loud"
			  - `$trigger`: JARVIS's nickname as defined in `jarvis-config.sh`  
			  - `$username`: your username as defined in `jarvis-config.sh`
			 
			### `jarvis-functions.sh`
			
			For advanced users, here you can customize the following functions:
			  - `LISTEN()`: function that records your voice
			  - `STT()`: function for speech recognition (to use another engine such as `sphinx`)
			  > The default `STT()` function has both Google Speech & PocketSphinx implementations. You can choose which one should be used in your `jarvis-config.sh`.
			  - `TTS()`: function that speaks text out loud (to use another engine such as `espeak`)
			  > The default `TTS()` function has both Google Speech & Say (Mac OSX) implementations. It is automatically chosen based on your plateform.
			  - `PLAY()`: function to play an audio file
			'''
		},{
			link: Usage
			id: usage
			title: Usage
			text: '''
			To start Jarvis:
			```
			./jarvis.sh -v
			```

			Advanced options:
			```
			./jarvis.sh -h
			
			Usage: jarvis.sh -flags
				
			-b  run in background (will continue after terminal is closed)
			-c  edit commands (what jarvis can recognize & execute)
			-e  edit events (jarvis pro-active voice notifications)
			-f  edit config
			-h  display this help
			-i  install (check dependencies & init config files)
			-k  read from keyboard instead of microphone
			-p  report a problem
			-q  do not speak answer (just console)
			-r  uninstall (remove config files)
			-s  just say something, ex: jarvis.sh -s "hello world"
			-u  update (git pull)
			-v  verbose & VU meter - recommended for first launch / troubleshooting
			-x  build (do not use)
			```
			'''
		},{
			title: Going further
			text: '''
I chose to use `Google Speech API` for the accuracy of the transcription, no matter the language.
As mentionned above, you can update the `STT` function to use another speech recognition engine.
The main offline alternative is `PocketSphinx` (`CMUSphinx for` embedded devices such as the Raspberry Pi).

Here below is a quick comparison table between the two:

|               | PocketSphinx                    | Google Speech API             |
|---------------|---------------------------------|-------------------------------|
| Price         | :-) Free                        | :-( limit 50 calls/day        | 
| Privacy       | :-) Offline                     | :-( Online                    | 
| Vocabulary    | :-( Raspi can't handle much     | :-)                           | 
| Accuracy      | :-( But ok if small dictionary  | :-)                           | 
| Speed         | :-)                             | :-)                           |

Both have their pros & cons, and on my RaspberryPi B, the trasncription speed is more or less equal.
However, the 50/day limit for `Google Speech API` can be a huge issue on a noisy (ex: Family) environment.
What if, instead of choosing between one or another, we choose both.

My idea was to use `PocketSphinx` for the magic word recognition, and `Google Speech API` for the command recognition.
Magic Word recognition *"Hey JARVIS"* is always on (thousands of recognitions a day: noise, talks...).
Only when there is a match, you are asked the command *"Switch on the Lights"*, which is a lot fewer.

Here is a new comparison table in this context:

|               | PocketSphinx (magic word)    | Google Speech API (command) |
|---------------|------------------------------|-----------------------------|
| Price         | :-)                          | :-) 50 commmands/day        | 
| Privacy       | :-) Offline                  | :-) Only known commands are sent | 
| Vocabulary    | :-) 1 word to recognize      | :-)                         | 
| Accuracy      | :-) Good if small dictionary | :-)                         | 
| Speed         | :-)                          | :-)                         |

Looks like we have a good match!
I have installed pocketsphinx (proposed during `jarvis.sh -i`) and updated my `jarvis-config.sh` accordingly:
```bash
# choice of STT engine for magic word detection (google|pocketsphinx)
trigger_stt=pocketsphinx
# choice of STT engine for command detection (google|pocketsphinx)
command_stt=google
```
This is my current config and i'm very happy with it, except that I have to pronouce *Jarvis* with an english accent (I'm french).
> For a better French pronounciation recognition, I have generated the dictionary & language model with this spelling: `Jarvees`.
'''
		},{
			link: FAQ
			id: faq
			title: Frequently Asked Questions
			text: '''
* Does it work on Raspberry Pi 3?
> It suppports Mac as well as all versions of the Raspberry Pi (1, 2 and 3)
* What mic or speakers should I use?
> USB mic or webcam with built-in mic (I use the Blue Yeti)  
> USB or jack-plugged speakers
* Google Chromium Speech API now closed?
> Jarvis still works with existing Chromium Speech API keys if you have already one  
> Google Cloud Speech API is in preview phase, once live will be used by Jarvis
* Is it possible to perform an http GET request with Jarvis?
> Yes `*DO*THAT*==wget -qO /dev/null "http://you_http_request" & say "Done"`
* What is the meaning of - ? and # characters that are displayed when I speak?
> `-` the recorded sound was too short (when waiting to hear "JARVIS")  
> `#` the recorded sound was too long (when waiting to hear "JARVIS")  
> `?` the recoded sound couldn't be transcribed to valid text
* `rec FAIL formats: can't open input hw:1,0: snd_pcm_hw_params error: Input/output error`
> Your USB mic has gone in error, quit jarvis & re-plug it or reset the USB port:  
```
pkill jarvis.sh # exit jarvis
lsusb # identify Bus XXX Device YYY of your mic
sudo ./usbreset /dev/bus/usb/XXX/YYY # with XXX and YYY from above
```
* `FATAL_ERROR: "continuous.c", line 153: Failed to calibrate voice activity detection`
> You might be using the wrong `pocketsphinx` version installed with `apt-get`. You must compile the latest version:  
> `sudo apt-get remove pocketshpinx; jarvis.sh -i` and accept to install `pocketsphinx`
'''
		},{
			link: Support
			id: support
			title: Get support
			image: "https://placeimg.com/300/300/tech/grayscale"
			text: '''
* Check out the [Documentation](#usage)
* A question? Please [post a comment](#disqus_thread) below
* [Report an issue](https://github.com/alexylem/jarvis/issues/new)
* [Submit a feature request](https://github.com/alexylem/jarvis/issues/new)
> *Jarvis* is built with :heart: on my own time, any kind of support is more than welcome:
* Spread the word using the [share option](#disqus_thread) below
* [Star the Repo](https://github.com/alexylem/jarvis) on GitHub
* [Contribute to Jarvis]() and join the team
* <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top"><input type="hidden" name="" value="_s-xclick"><input type="hidden" name="hosted_button_id" value="KUY4CUFXEYDR2"><input type="image" src="http://megaicons.net/static/img/icons_sizes/40/110/32/paypal-icon.png" border="0" name="submit"> Pay me a beer</form>
'''
		}
	]
	footer: "Alexandre Mély - [:pencil2:](https://github.com/alexylem/jarvis/edit/gh-pages/config.hjson)"
}
